#!/usr/bin/env node
function cli(t){"use strict";var r={help:{format:"",description:"Displays this information."},format:{format:"<format>",description:"Indicate which format to use for output."},"list-rules":{format:"",description:"Outputs all of the rules available."},quiet:{format:"",description:"Only output when errors are present."},errors:{format:"<rule[,rule]+>",description:"Indicate which rules to include as errors."},warnings:{format:"<rule[,rule]+>",description:"Indicate which rules to include as warnings."},ignore:{format:"<rule[,rule]+>",description:"Indicate which rules to ignore completely."},"exclude-list":{format:"<file|dir[,file|dir]+>",description:"Indicate which files/directories to exclude from being linted."},config:{format:"<file>",description:"Reads csslint options from specified file."},version:{format:"",description:"Outputs the current version number."}};function i(r,i){var n,e=t.readFile(r),o=function(t){var r=t.ignore,i=null;return r&&(i=CSSLint.getRuleset(),r.split(",").forEach(function(t){i[t]=0})),i}(i),s=CSSLint.verify(e,function(t,r){var i=t.rules||t.warnings,n=t.errors;return i&&(r=r||{},i.split(",").forEach(function(t){r[t]=1})),n&&(r=r||{},n.split(",").forEach(function(t){r[t]=2})),r}(i,o)),c=CSSLint.getFormatter(i.format||"text"),a=s.messages||[],u=0;return e?(i.fullPath=t.getFullPath(r),(n=c.formatResults(s,r,i))&&t.print(n),a.length>0&&function(t,r){return t.filter(function(t){return t.type===r})}(a,"error").length>0&&(u=1)):(c.readError?t.print(c.readError(r,"Could not read file data. Is the file empty?")):t.print("csslint: Could not read file data in "+r+". Is the file empty?"),u=1),u}function n(){var i="",n="";for(var e in t.print(["\nUsage: csslint-rhino.js [options]* [file|dir]*"," ","Global Options"].join("\n")),r)r.hasOwnProperty(e)&&(i+="  --"+e,""!==r[e].format?i+=n="="+r[e].format:n="",i+=new Array(40-(e.length+n.length)).join(" "),i+=r[e].description+"\n");t.print(i)}function e(r,i){for(var n,e,o=r.shift(),s=i||{},c=[];o;)0===o.indexOf("--")?(n=o.substring(2)).indexOf("=")>-1?s[(e=n.split("="))[0]]=e[1]:s[n]=!0:t.isDirectory(o)?c=c.concat(t.getFiles(o)):c.push(o),o=r.shift();return s.files=c,s}var o,s,c,a=t.args,u=a.length;((c=e(a)).help||0===u)&&(n(),t.quit(0)),c.version&&(t.print("v"+CSSLint.version),t.quit(0)),c["list-rules"]&&(t.print(""),CSSLint.getRules().forEach(function(r){t.print(r.id+"\n  "+r.desc+"\n")}),t.quit(0)),s=function(r){var i,n,o,s=function(r){var i=r||".csslintrc";return t.readFile(t.getFullPath(i))}(r),c={};if(s){if("{"===s.charAt(0))try{for(n in i=JSON.parse(s),s="",i)i.hasOwnProperty(n)&&(o=i[n],Array.isArray(o)&&(o=o.join(",")),s+="--"+n+"="+o)}catch(t){}c=e(s.replace(/\s+/g,"").split(/(?=--)/))}return c}(c.config),CSSLint.Util.mix(s,c),function(i){for(var e in i)r.hasOwnProperty(e)||"files"===e||(t.print(e+" is not a valid option. Exiting..."),n(),t.quit(0))}(o=s),t.quit(function(r,n){var e,o,s=0,c=n.format||"text",a=function(r,i){var n,e=i["exclude-list"],o=[],s=r.map(t.getFullPath);return e&&(e.split(",").forEach(function(r){t.isDirectory(r)?o=o.concat(t.getFiles(r)):o.push(r)}),o.forEach(function(r){n=t.getFullPath(r),s.indexOf(n)>-1&&s.splice(s.indexOf(n),1)})),s}(r,n);return a.length?CSSLint.hasFormat(c)?((o=(e=CSSLint.getFormatter(c)).startFormat())&&t.print(o),a.forEach(function(t){0===s?s=i(t,n):i(t,n)}),(o=e.endFormat())&&t.print(o)):(t.print("csslint: Unknown format '"+c+"'. Cannot proceed."),s=1):(t.print("csslint: No files specified."),s=1),s}(o.files,o))}var fs=require("fs"),path=require("path"),CSSLint=require("./csslint-node").CSSLint;cli({args:process.argv.slice(2),print:function(t){fs.writeSync(1,t+"\n")},quit:function(t){process.exit(t||0)},isDirectory:function(t){try{return fs.statSync(t).isDirectory()}catch(t){return!1}},getFiles:function(t){var r=[];try{fs.statSync(t)}catch(t){return[]}return function t(i,n){n.push(i),fs.readdirSync(n.join("/")).forEach(function(i){var e=n.concat([i]).join("/"),o=fs.statSync(e);"."!==i[0]&&(o.isFile()&&/\.css$/.test(i)?r.push(e):o.isDirectory()&&t(i,n))}),n.pop()}(t,[]),r},getWorkingDirectory:function(){return process.cwd()},getFullPath:function(t){return path.resolve(process.cwd(),t)},readFile:function(t){try{return fs.readFileSync(t,"utf-8")}catch(t){return""}}});