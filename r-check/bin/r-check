#!/usr/bin/env node

/**
 *dependencies
 */
const program = require("commander");
const args = process.argv;
const run = require("../index");
const fs = require("fs");
const path = require("path");
const initConfigFile = require("../libs/initConfig/initConfig");
const debug = require("../common/debug");

/**
 * 当输入r-check -h是会显示下列帮助信息
 */
program.version(require('../package').version)
    .usage('<command> [options]')
    .option("-P, --path [configfile path]", "The path of your config file which should follow with the -P or --path option.")
    .option("-S, --close-check", "Close source code check.")
    .option("-C, --close-css", "Close css check.")
    .option("-H, --close-html", "Close html check.")
    .option("-J, --close-js", "Close js check.")
    .option("-E, --close-encode", "Close encode check.")
    .option("-T, --check-translate", "Open translate check.")
    .option("-D, --debug,", "Run in debug mode.")
    .option("-M, --multifile", "Output the results as a single log for each file checked");
// .option("-F, --check-folder,","the folder or file you want to check");

//生成配置文件
program.command("init")
    .option("-F,--force", "force to generate config files even the older files exist")
    .description("generate eslint config file and r.config.js.")
    .action((name, cmd) => {
        if (cmd) {
            generateConfigFile(name, cmd.force);
        } else {
            generateConfigFile("r.config.js", name.force);
        }
    });

//生成ESLint
program.command("init-eslint")
    .description("generate eslint config file only.")
    .action((name,cmd) => {
        if (cmd) {
            generateEslint("", cmd.force);
        } else {
            generateEslint("", name.force);
        }
    });

program.parse(args);

let options = generateOptions(args);

checkOptionsValid(options);
run(process.cwd(), options);

/**
 * 检查输入配置是否有冲突的地方
 * @param options 生成的配置
 */
function checkOptionsValid(options) {
    if (options.closeCheck === true && options.checkTranslate === false && options.closeEncode == true) {
        throw new Error("没有配置任何检查");
    }

    if (options.checkTranslate === true && options.optionsPath === null) {
        // throw new Error("")
    }

}

/**
 * 根据cli的输入生成配置项
 */
function generateOptions() {
    let defaultOptions = {
        "closeCheck": program.closeCheck ? true : false,
        "checkCss": program.closeCss ? false : true,
        "checkHtml": program.closeHtml ? false : true,
        "checkJs": program.closeJs ? false : true,
        "checkTranslate": program.checkTranslate ? true : false,
        "optionsPath": program.path || "r.config.js",
        "checkEncode": program.closeEncode ? false : true,
        "multifile": program.multifile ? true : false
    };

    global.debug = program.debug ? true : false;

    if (defaultOptions.optionsPath == "r.config.js") {
        if (!fs.existsSync(path.join(process.cwd(), "r.config.js"))) {
            console.warn("/***********************没有r.config.js配置文件***********************/");
            generateConfigFile();
            console.warn("/***********************请检查配置，并重新开始***********************/");
            process.exit(1);
        }
    }

    return defaultOptions;
}

//生产配置文件  包括r.config.js  .eslintrc .eslintignore
function generateConfigFile(name, force) {
    console.log("");
    console.log("/***************************生成配置文件中***************************/");
    console.log("");
    initConfigFile(name, "all", force);
    console.log("");
    console.log("/***************************配置文件已生成***************************/");
    console.log("");
    console.warn("/***********************请检查配置，并重新开始***********************/");
    console.log("");
    process.exit(1);
}


//只生成ESLint配置文件
function generateEslint(name, force) {
    console.log("");
    console.log("/***************************生成ESLint配置文件中***************************/");
    console.log("");
    initConfigFile(name, "eslint", force);
    console.log("");
    console.log("/***************************配置文件已生成***************************/");
    console.log("");
    process.exit(1);
}