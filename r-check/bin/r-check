#!/usr/bin/env node

//dependencies
const inquirer = require("inquirer"); //a tool for cli interaction with questions
const program = require("commander"); //a tool to parse command interface arguments
const fs = require("fs");
const path = require("path");

//custom utils
const initConfigFile = require("../libs/initConfig/initConfig");
const debug = require("../common/debug");
const run = require("../index");
const fixBug = require("../common/fixBug.js");
const cwd = process.cwd();
const args = process.argv;

HelloWorld();

/**
 * 当输入r-check -h时会显示下列帮助信息
 */
program
    .version(require('../package').version)
    .usage('<command> [options],use order(r-check run -h) for help information');


//when enter <r-check init> in CLI the function in action method will be triggered 
program
    .command("init")
    .description('generate .eslintrc .eslintignore and r.config.js')
    .option("-y, --yes", "Use default options")
    .option("-o, --old", "Is old code (must use with --yes,otherwise it will not work)")
    .option("-f, --force", "Force to generate config files")
    .action((args) => {
        //check whether config files exist already
        const fileExist = {
            eslintrc: fs.existsSync(path.join(cwd, ".eslintrc.js")),
            eslintignore: fs.existsSync(path.join(cwd, ".eslintignore")),
            rconfigjs: fs.existsSync(path.join(cwd, "r.config.js"))
        };
        let questions = {
            q1: [{
                name: "1.生成所有配置文件(r.config.js 和 eslint相关配置文件)",
                value: "all"
            }, {
                name: "2.仅生成eslint相关配置文件",
                value: "eslint"
            }, {
                name: "3.仅生成r.config.js",
                value: "rconfig"
            }],
            q2: "需要检测的代码为老代码吗？(老代码关闭no-undef,block-scoped-var检查)(默认：n)",
            q3: "检测到相关配置文件已经存在，是否需要覆盖生成新文件？(默认：n)"
        };
        inquirer
            .prompt([{
                type: "list",
                message: "需要生成的配置文件类型",
                choices: questions.q1,
                default: "all",
                name: "fileType",
                when: () => {
                    return !args.yes;
                }
            }, {
                type: "confirm",
                default: false,
                message: questions.q2,
                name: "oldCode",
                when: () => {
                    return !args.yes;
                }
            }, {
                type: "confirm",
                default: false,
                message: questions.q3,
                name: "force",
                when: answer => {
                    if (!!args.yes) {
                        return false;
                    }
                    switch (answer.fileType) {
                        case "all":
                            {
                                if (!fileExist.eslintignore && !fileExist.eslintrc && !fileExist.rconfigjs) return false;
                                return true;
                            }
                            break;
                        case "eslint":
                            {
                                if (!fileExist.eslintignore && !fileExist.eslintrc) return false;
                                return true
                            }
                            break;
                        case "rconfig":
                            {
                                if (!fileExist.rconfigjs) return false;
                                return true
                            }
                            break;
                    }
                    return false;
                }
            }])
            .then(answer => {
                let options = {
                    fileType: "all",
                    isOld: !!args.old,
                    force: !!args.force
                };
                if (!args.yes) {
                    options = {
                        fileType: answer.fileType,
                        isOld: !!answer.oldCode,
                        force: !!answer.force
                    }
                }
                initConfigFile(options, cwd, fileExist);
            })
            .catch(err => {
                console.log(err)
            });

    });

//run指令，用于检查当前目录下的所有代码
program
    .command("run")
    .description("Check your folder with different options.")
    .option("-P, --path [configfile path]", "The path of your config file which should follow with the -P or --path option.")
    .option("-S, --close-check", "Close source code check.")
    .option("-C, --close-css", "Close css check.")
    .option("-H, --close-html", "Close html check.")
    .option("-J, --close-js", "Close js check.")
    .option("-E, --close-encode", "Close encode check.")
    .option("-T, --check-translate", "Open translate check.")
    .option("-D, --debug,", "Run in debug mode.")
    .option("-M, --multifile", "Output the results as a single log for each file checked")
    .option("-Q, --question", "Run immidiately without config any options")
    .action(args => {
        let scb = ans => {
            return !ans.closeCheck;
        };
        if (args.question) {
            debug("参数:", args);
            run(cwd, parseOpt(args));
        } else {
            console.log("可以使用r-check run -Q指令来配置相关检查哦！");
            console.log("也可以通过配置参数来快速配置");
            console.log("");
            console.log("");

            inquirer
                .prompt([{
                    type: "confirm",
                    message: "是否关闭代码规范检查(HTML、CSS、JS)(默认:n)",
                    default: false,
                    name: "closeCheck"
                }, {
                    type: "confirm",
                    message: "是否开启HTML检查(默认:y)",
                    default: true,
                    name: "checkHtml",
                    when: scb
                }, {
                    type: "confirm",
                    message: "是否开启CSS检查(默认:y)",
                    default: true,
                    name: "checkCss",
                    when: scb
                }, {
                    type: "confirm",
                    message: "是否开启JS检查(默认:y)",
                    default: true,
                    name: "checkJs",
                    when: scb
                }, {
                    type: "confirm",
                    message: "是否开启编码格式检查(默认:y)",
                    default: true,
                    name: "checkEncode"
                }, {
                    type: "confirm",
                    message: "是否开启翻译检查(默认:n)",
                    default: false,
                    name: "checkTranslate"
                }, {
                    type: "confirm",
                    message: "错误日志采用单文件(n表示多文件)(默认:y)",
                    default: true,
                    name: "multifile"
                }])
                .then(answer => {
                    answer.optionsPath = "r.config.js";
                    checkOptionsValid(answer) && run(cwd, answer);
                })
                .catch(err => {
                    console.log(err)
                });
        }
    });
//r-check fix 指令，用于修复ESLint检查出来的错误
program
    .command("fix")
    .description("Fix some simple javascipt bugs discovered by ESlint")
    .action(() => {
        fixBug(cwd);
    })
//r-check oem-watch指令，当开发OEM项目时，使用该指令来监视当前文件目录
// program.command("oem-watch")
//     .description("Watch the files blow your current working directory while doing oem test")
//     .option("-S, --silent", "Disable all console")
//     .action(args => {
//         let debug = !!args.silent;
//         //监听当前目录的状态

//         fs.watch(process.cwd(), (event, filename) => {

//         });
//     });
program.parse(args);

/**
 * 检查输入配置是否有冲突的地方
 * @param options 生成的配置
 */
function checkOptionsValid(options) {
    if (options.closeCheck === true && options.checkTranslate === false && options.checkEncode == false) {
        console.log("没有配置任何检查");
        return false;
    }
    return true;
}

function parseOpt(opt) {
    return {
        closeCheck: !!opt.closeCheck,
        checkHtml: !opt.closeHtml,
        checkCss: !opt.closeCss,
        checkJs: !opt.closeJs,
        checkEncode: !opt.closeEncode,
        checkTranslate: !!opt.checkTranslate,
        debug: !!opt.debug,
        multifile: !!opt.multifile,
        optionsPath: "r.config.js"
    }
}

/**
 * just for fun
 */
function HelloWorld() {
    console.log("");
    console.log("Hello r-check");
    console.log("Current Vertion:" + require('../package').version);
    console.log("");
}

// // //DEBUG: r-check run DEBUG start
// let debug_cwd = path.join(__dirname, "../test");
// let opt = {
//     closeCheck: false,
//     checkHtml: true,
//     checkCss: true,
//     checkJs: true,
//     checkEncode: true,
//     checkTranslate: false,
//     debug: true,
//     multifile: true,
//     optionsPath: "r.config.js"
// }
// run(debug_cwd, opt);
//DEBUG: r-check run DEBUG end